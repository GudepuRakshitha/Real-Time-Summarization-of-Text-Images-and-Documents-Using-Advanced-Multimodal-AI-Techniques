
import { useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import TextInput from "@/components/TextInput";
import FileUpload from "@/components/FileUpload";
import SummaryOutput from "@/components/SummaryOutput";
import SummaryOptionsComponent from "@/components/SummaryOptions";
import { toast } from "sonner";

export type SummaryLength = "short" | "medium" | "detailed";
export type SummaryTechnique = "extractive" | "abstractive";

export interface SummaryOptions {
  length: SummaryLength;
  technique: SummaryTechnique;
  language: string;
}

const SummarizationPanel = () => {
  const [inputText, setInputText] = useState("");
  const [summaryResult, setSummaryResult] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [summaryOptions, setSummaryOptions] = useState<SummaryOptions>({
    length: "medium",
    technique: "abstractive",
    language: "english"
  });

  const handleSummarize = async () => {
    if (!inputText.trim()) {
      toast.error("Please enter some text to summarize");
      return;
    }

    setIsLoading(true);
    
    try {
      // This is a mock API call. In a real application, you would call your LLM API here
      // const response = await fetch('your-api-endpoint', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({ text: inputText, options: summaryOptions })
      // });
      // const data = await response.json();
      // setSummaryResult(data.summary);
      
      // For demonstration, we'll simulate an API call with a timeout
      setTimeout(() => {
        const mockSummary = generateMockSummary(inputText, summaryOptions);
        setSummaryResult(mockSummary);
        setIsLoading(false);
        toast.success("Summary generated successfully!");
      }, 2000);
    } catch (error) {
      console.error("Error generating summary:", error);
      toast.error("Failed to generate summary. Please try again.");
      setIsLoading(false);
    }
  };

  // This function simulates a summary generation for demonstration purposes
  const generateMockSummary = (text: string, options: SummaryOptions): string => {
    const wordCount = text.split(/\s+/).length;
    let summaryLength = 0;
    
    switch (options.length) {
      case "short":
        summaryLength = Math.max(wordCount * 0.1, 20);
        break;
      case "medium":
        summaryLength = Math.max(wordCount * 0.2, 50);
        break;
      case "detailed":
        summaryLength = Math.max(wordCount * 0.3, 100);
        break;
    }
    
    const sentences = text.match(/[^.!?]+[.!?]+/g) || [];
    let summary = "";
    
    if (options.technique === "extractive") {
      // Simple extractive summarization: take the first few sentences
      const extractedSentences = sentences.slice(0, Math.min(sentences.length, 5));
      summary = extractedSentences.join(" ");
    } else {
      // For abstractive, we'd normally use an LLM, but for mock we'll use a template
      summary = `This is a simulated ${options.length} ${options.technique} summary in ${options.language} of the text containing approximately ${wordCount} words. In a real application, this would be generated by an LLM like GPT, Gemini, or LLaMA.\n\nThe text discusses ${text.substring(0, 50)}...`;
    }
    
    return summary;
  };

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden">
      <Tabs defaultValue="text" className="w-full">
        <TabsList className="w-full bg-maroon-100 p-0 border-b border-maroon-200">
          <TabsTrigger value="text" className="flex-1 py-3 rounded-none data-[state=active]:bg-white">
            Enter Text
          </TabsTrigger>
          <TabsTrigger value="file" className="flex-1 py-3 rounded-none data-[state=active]:bg-white">
            Upload File
          </TabsTrigger>
        </TabsList>
        
        <div className="p-6">
          <TabsContent value="text" className="mt-0">
            <TextInput 
              value={inputText} 
              onChange={setInputText} 
            />
          </TabsContent>
          
          <TabsContent value="file" className="mt-0">
            <FileUpload 
              onTextExtracted={setInputText} 
            />
          </TabsContent>
          
          <SummaryOptionsComponent 
            options={summaryOptions}
            onChange={setSummaryOptions}
          />
          
          <SummaryOutput 
            result={summaryResult}
            isLoading={isLoading}
            onSummarize={handleSummarize}
          />
        </div>
      </Tabs>
    </div>
  );
};

export default SummarizationPanel;
